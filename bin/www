#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("app:server");
var http = require("http");

//creating server using nodejs http module
//const http = require('http');
//const server = http.createServer((req, res, next) => {
//  res.writeHead(301, {'Location' : 'http://inductbook.safenode.co.nz'});
//  res.end();
//});

//server.listen(process.env.PORT || 3000);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "5000");
//var port = normalizePort(process.env.PORT || '80');
app.set("port", port);

/**
 * Create HTTP server.
 */

// console.log(app);
var server = http.createServer(app);

//socket.io instantiation
//const io = require("socket.io")(server);

var io = require("socket.io")(server);

const sio = require("../helpers/socketio")(io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

//console.log(server)
console.log(`Server started on port: ${port}`);
//module.exports.io = io; //not working: 17-Feb-21

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
